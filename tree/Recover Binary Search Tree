Recover Binary Search Tree

Two elements of a binary search tree (BST) are swapped by mistake.
Tell us the 2 values swapping which the tree will be restored.

 Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution? 
Example :


Input : 
         1
        / \
       2   3

Output : 
       [1, 2]

Explanation : Swapping 1 and 2 will change the BST to be 
         2
        / \
       1   3
which is a valid BST  

*****Solution*****

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 void f(TreeNode* A,vector<int> &inorder)
 {
     if(A!=NULL)
     {
         f(A->left,inorder);
         inorder.push_back(A->val);
         f(A->right,inorder);
     }
 }
 
vector<int> Solution::recoverTree(TreeNode* A) {
    vector<int> inorder;
    f(A,inorder);
    /*for(int i=0;i<inorder.size();i++)
        cout<<inorder[i]<<" ";
        cout<<endl;*/
    int first=-1,last=-1,middle=-1;
    int count=1;
    for(int i=1;i<inorder.size();i++)
    {
        if(inorder[i]<inorder[i-1] && count==1)
            {
                first=inorder[i-1];
                middle=inorder[i];
                count++;
            }
        else if(inorder[i]<inorder[i-1] && count==2)
            {
                last=inorder[i];
                break;
            }
    }
    if(last==-1)
    {
        vector<int> ans{middle,first};
        return ans;
    }
    vector<int> ans{last,first};
    return ans;
}
