sorted array to BST

Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

 Balanced tree : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 
Example :


Given A : [1, 2, 3]
A height balanced BST  : 

      2
    /   \
   1     3

   *****SOLUTION*****

 /**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 TreeNode* tree(const vector<int> &A,int l,int r)
 {
     if(l>r || l<0 || l>=A.size() || r<0 || r>=A.size())return NULL;
    int middle=(l+r)/2;
     TreeNode* root=new TreeNode(A[middle]);
     root->left=tree(A,l,middle-1);
     root->right=tree(A,middle+1,r);
     return root;
 }
 
 
TreeNode* Solution::sortedArrayToBST(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int n=A.size();
    if(n==0)return NULL;
    int middle=n/2;
    return tree(A,0,n-1);
    
}
