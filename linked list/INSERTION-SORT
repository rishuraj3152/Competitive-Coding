INSERTION-SORT(A)
   for i = 1 to n
   	key ← A [i]
    	j ← i – 1
  	 while j > = 0 and A[j] > key
   		A[j+1] ← A[j]
   		j ← j – 1
   	End while 
   	A[j+1] ← key
  End for 

 Sort a linked list using insertion sort.

Example :

Input : 1 -> 3 -> 2

Return 1 -> 2 -> 3

		*****SOLUTION******

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::insertionSortList(ListNode* A) {
    if(A==NULL || A->next==NULL)return A;
    unordered_map<ListNode*, ListNode*> save;
    ListNode* temp=A->next;
    ListNode* prev=A;
    ListNode* j=NULL;
    int count=1;
    int key;
    save[A]=NULL;
    while(temp!=NULL)
    {
        count++;
        save[temp]=prev;
        prev=temp;
        temp=temp->next;
    }
    temp=A->next;
    while(temp!=NULL)
    {
        key=temp->val;
        j=save[temp];
        while(j!=NULL && j->val>key)
        {
            j->next->val=j->val;
            j=save[j];
        }
        if(j!=NULL)
            j=j->next;
        else
        j=A;
        j->val=key;
        temp=temp->next;
    }
    return A;
}
