		Reorder List

Given a singly linked list

    L: L0 → L1 → … → Ln-1 → Ln,
reorder it to:

    L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …
You must do this in-place without altering the nodes’ values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.

		*****Solution*****

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::reorderList(ListNode* A) {
    if(A==NULL || A->next==NULL || A->next->next==NULL)return A;
    ListNode* temp=A;
    ListNode* last=NULL;
    ListNode* ln=NULL;
    ListNode* f=NULL;
    ListNode* fn=NULL;
    int count=0;
    while(temp!=NULL)
    {
        count++;
        temp=temp->next;
        if(temp!=NULL)
            if(temp->next==NULL)last=temp;
    }
    temp=A;
    for(int i=0;i<count/2;i++)
        temp=temp->next;
    
    ListNode* prev=temp;
    ListNode* curr=temp->next;
    ListNode* Next=curr->next;
    prev->next=NULL;
    while(curr!=NULL)
    {
        curr->next=prev;
        prev=curr;
        curr=Next;
        if(curr!=NULL)
        Next=curr->next;
    }
    
    f=A;
    fn=f->next;
    ln=last->next;
    if(count%2==0)
    {
        count=count/2-1;
    }
    else count=count/2;
    for(int i=0;i<count;i++)
        {
            f->next=last;
            last->next=fn;
            f=fn;
            fn=f->next;
            last=ln;
            ln=last->next;
        }
    return A;
    
}
