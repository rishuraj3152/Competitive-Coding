		LIST CYCLE

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Try solving it using constant additional space.

Example :

Input : 

                  ______
                 |     |
                 \/    |
        1 -> 2 -> 3 -> 4

Return the node corresponding to node 3.

			*****SOLUTION*****
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::detectCycle(ListNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    if(A==NULL)return NULL;
    if(A->next==A)return A;
    if(A->next==NULL)return NULL;
    unordered_map<ListNode*,bool> visited;
    ListNode* temp=A;
    while(temp!=NULL)
    {
        if(visited.find(temp)==visited.end())
            visited[temp]=true;
        else if(visited[temp]==true)return temp;
        temp=temp->next;
    }
    return NULL;
}
