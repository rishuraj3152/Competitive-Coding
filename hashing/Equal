		Equal

Given an array A of integers, find the index of values that satisfy A + B = C + D, where A,B,C & D are integers values in the array

Note:

1) Return the indices `A1 B1 C1 D1`, so that 
  A[A1] + A[B1] = A[C1] + A[D1]
  A1 < B1, C1 < D1
  A1 < C1, B1 != D1, B1 != C1 

2) If there are more than one solutions, 
   then return the tuple of values which are lexicographical smallest. 

Assume we have two solutions
S1 : A1 B1 C1 D1 ( these are values of indices int the array )  
S2 : A2 B2 C2 D2

S1 is lexicographically smaller than S2 iff
  A1 < A2 OR
  A1 = A2 AND B1 < B2 OR
  A1 = A2 AND B1 = B2 AND C1 < C2 OR 
  A1 = A2 AND B1 = B2 AND C1 = C2 AND D1 < D2
Example:

Input: [3, 4, 7, 1, 2, 9, 8]
Output: [0, 2, 3, 5] (O index)
If no solution is possible, return an empty list.

		*****Solution*****


bool lexico(vector<int> &a,vector<int> &b)
{
    if(a[0]<b[0])return 1;
    else if(a[0]==b[0] && a[1]<b[1])return 1;
    else if(a[0]==b[0] && a[1]==b[1] && a[2]<b[2])return 1;
    else if(a[0]==b[0] && a[1]==b[1] && a[2]==b[2] && a[3]<b[3])return 1;
    else return 0;
}
void print(vector<int> a)
{
    for(int i=0;i<a.size();i++)
    {
        cout<<a[i]<<" ";
    }
    cout<<endl;
}
vector<int> Solution::equal(vector<int> &A) {
    unordered_map<int,pair<int,int> > store;
    vector<int> ans;
    for(int i=0;i<A.size();i++)
    {
        for(int j=i+1;j<A.size();j++)
        {
            if(store.find(A[i]+A[j])==store.end())
            {
                store[A[i]+A[j]]=make_pair(i,j);
            }
        }
    }
    
    for(int c=0;c<A.size();c++)
    {
        for(int d=c+1;d<A.size();d++)
        {
            if(store.find(A[c]+A[d])!=store.end())
            {
                int a=store[A[c]+A[d]].first;
                int b=store[A[c]+A[d]].second;
                if(a<c && b!=c && b!=d && c<d)
                {
                    vector<int> temp;
                    temp.push_back(a);
                    temp.push_back(b);
                    temp.push_back(c);
                    temp.push_back(d);
                    
                    if(ans.size()==0)ans=temp;
                    else
                    {
                        if(lexico(temp,ans))
                          {  
                              //print(temp);
                              ans=temp;
                            
                          }
                    }
                
                    store[A[c]+A[d]]=make_pair(c,d);
                }
                
            }
        }
    }
    return ans;
    
}
