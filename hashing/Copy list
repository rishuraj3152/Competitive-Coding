		Copy list

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or NULL.

Return a deep copy of the list.

Example

Given list

   1 -> 2 -> 3
with random pointers going from

  1 -> 3
  2 -> 1
  3 -> 1
You should return a deep copy of the list. The returned answer should not contain the same node as the original list, but a copy of them. The pointers in the returned list should not link to any node in the original input list.

		*****Solution*****

/**
 * Definition for singly-linked list.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
RandomListNode* Solution::copyRandomList(RandomListNode* A) {
    RandomListNode* ans=NULL,*temp=A;
    RandomListNode* another=NULL;
    while(temp!=NULL)
    {
        RandomListNode* nnode=new RandomListNode(temp->label);
        if(ans==NULL){ans=nnode;another=ans;}
        else {ans->next=nnode;ans=nnode;}
        temp=temp->next;
    }
    temp=A;
    ans=another;
    while(temp!=NULL)
    {
        RandomListNode* t=temp->next;
        temp->next=ans;
        ans->random=temp;
        temp=t;
        ans=ans->next;
    }
    temp=A;
    ans=another;
    while(ans!=NULL)
    {
        if(ans->random->random!=NULL)
        ans->random=ans->random->random->next;
        else ans->random=ans->random->random;
        ans=ans->next;
    }
    return another;
}
