unique paths in a grid

Given a grid of size m * n, lets assume you are starting at (1,1) and your goal is to reach (m,n). At any instance, if you are on (x,y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example :
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

*****solution*****

void func(vector<vector<int> > &A,int i,int j,int m,int n,int &count)
{
    int a=0,b=0;
    if(i==m && j==n)
        count++;
    else
    {
        if(i+1<=m && j<=n && A[i+1][j]!=1)
            func(A,i+1,j,m,n,count);
        if(i<=m && j+1<=n && A[i][j+1]!=1)
            func(A,i,j+1,m,n,count);
    }
}
int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) {
    int m=A.size();
    int n=A[0].size();
    if(m==0)return 0;
    if(A[0][0]==1)return 0;
    int count=0;
    func(A,0,0,m-1,n-1,count);
    return count;
}
