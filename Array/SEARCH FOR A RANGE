		SEARCH FOR A RANGE

Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithmâ€™s runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example:

Given [5, 7, 7, 8, 8, 10]

and target value 8,

return [3, 4].

		*****Solution*****

int binsearch(const vector<int> &A,int l,int r,int b)
{
    int mid;
    int index=-1;
    while(l<=r)
    {
        mid=(l+r)/2;
        if(A[mid]==b)
        {
            index=mid;
            if(index==0)return index;
            if(A[mid-1]==A[mid])
            {
                l=0;
                r=mid-1;
            }
            else break;
        }
        else if(A[mid]<b)l=mid+1;
        else r=mid-1;
    }
    return index;
}

int bin1search(const vector<int> &A,int l,int r,int b)
{
    int mid;
    int index=-1;
    while(l<=r)
    {
        mid=(l+r)/2;
        if(A[mid]==b)
        {
            index=mid;
            if(index==A.size()-1)return index;
            if(A[mid+1]==A[mid])
            {
                l=mid+1;
                r=A.size()-1;
            }
            else break;
        }
        else if(A[mid]<b)l=mid+1;
        else r=mid-1;
    }
    return index;
}

vector<int> Solution::searchRange(const vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int n=A.size();
    int index=binsearch(A,0,n-1,B);
    vector<int> ans;
    if(index==-1)
    {
        ans.push_back(-1);
        ans.push_back(-1);
        return ans;
    }
    else
    {
        ans.push_back(index);
        int endindex=bin1search(A,0,n-1,B);
        ans.push_back(endindex);
    }
    vector<int> final;
    vector<int>::iterator it;
    it=min_element(ans.begin(),ans.end());
    final.push_back(*it);
    it=max_element(ans.begin(),ans.end());
    final.push_back(*it);
    return final;
}
