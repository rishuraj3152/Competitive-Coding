399. Evaluate Division

Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0.
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
 

The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

*****Solution****
class Solution {
public:
    double dfs(vector<vector<string>>& equations, vector<double>& values, vector<string> p,set<int> &s)
    {
        for(int i=0;i<equations.size();i++)
        {
            if(p[0]==equations[i][0] && p[1]==equations[i][1])return values[i];
            if(p[0]==equations[i][1] && p[1]==equations[i][0])return 1/values[i];
        }
        
        for(int i=0;i<equations.size();i++)
        {
            if(s.find(i)==s.end() && p[0]==equations[i][0])
            {
                s.insert(i);
                vector<string> v{equations[i][1],p[1]};
                double temp=dfs(equations,values,v,s)*values[i];
                if(temp>0)return temp;
                else s.erase(i);
            }
            if(s.find(i)==s.end() && p[0]==equations[i][1])
            {
                s.insert(i);
                vector<string> v{equations[i][0],p[1]};
                double temp=dfs(equations,values,v,s)/values[i];
                if(temp>0)return temp;
                else s.erase(i);
            }
        }
        return -1.0;
    }
    
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        int q=queries.size();
        set<string> store;
        for(int i=0;i<equations.size();i++)
        {
            store.insert(equations[i][0]);
            store.insert(equations[i][1]);
        }
        vector<double> ans;
        for(int i=0;i<q;i++)
        {
            if(queries[i][0]==queries[i][1])
            {
                if(store.find(queries[i][0])==store.end())
                    ans.push_back(-1.0);
                else ans.push_back(1.0);
            }
            else if(store.find(queries[i][0])==store.end() || store.find(queries[i][1])==store.end())
            {
                ans.push_back(-1.0);
                //cout<<"ho gaya bc";
            }
            else
            {
                set<int> Set;  
                ans.push_back(dfs(equations,values,queries[i],Set));
            }
        }
        return ans;
    }
};